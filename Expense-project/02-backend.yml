- name: backend for expense app
  hosts: backend
  become: yes
  vars:
      mysql_host: mysql.daws38sat.fun
      mysql_password: "ExpenseApp@1"
  tasks:
  - name: Disable the nodejs DNF module stream
    ansible.builtin.command:
      cmd: dnf module disable -y nodejs
    ignore_errors: true 

  # ALTERNATIVE FOR community.general.module_action (using command)
  - name: Enable the nodejs 20 DNF module stream
    ansible.builtin.command:
      cmd: dnf module enable -y nodejs:20

  - name: Install the nodejs package
    ansible.builtin.package:
      name: nodejs
      state: present

  # --- (Rest of your original playbook tasks remain the same) ---
      
  - name: Create user 'expense' with default settings
    ansible.builtin.user:
      name: expense
      state: present
  
  - name: Ensure the /app directory exists
    ansible.builtin.file:
      path: /app
      state: directory
  
  # This task is error-prone, but preserved as requested
  - name: Run multiple commands sequentially (install, then check version)
    ansible.builtin.shell:
      cmd: |
        curl -o /tmp/backend.zip https://expense-joindevops.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
        cd /app
        unzip /tmp/backend.zip &
        cd /app
        npm install &
  
  - name: Copy a file from one location to another, all on the remote server
    ansible.builtin.copy:
      src: ./backend.service
      dest: /etc/systemd/system/backend.service
  
  - name: Reload the systemd daemon
    ansible.builtin.systemd_service:
      daemon_reload: yes
  
  - name: started service backend
    ansible.builtin.service:
      name: backend
      state: started
      enabled: yes

  - name: Install mysql
    ansible.builtin.package:
      name: mysql
      state: present
  
  # Note: The mysql_db module also comes from 'community.mysql', 
  # so this shell command is the correct 'ansible.builtin' alternative.
  - name: Run mysql command via shell module
    ansible.builtin.shell: "mysql -h {{ mysql_host }} -uroot -p{{ mysql_password }} < /app/schema/backend.sql"  
  - name: started service backend
    ansible.builtin.service:
      name: backend
      state: restarted